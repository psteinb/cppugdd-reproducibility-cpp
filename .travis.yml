language: cpp

branches:
  except:
  - /dev-appveyor.*/

common_sources: &all_sources
  - ubuntu-toolchain-r-test
  - llvm-toolchain-trusty
  - llvm-toolchain-trusty-3.9
  - llvm-toolchain-trusty-4.0
  - llvm-toolchain-trusty-5.0
  - llvm-toolchain-trusty-6.0
  - llvm-toolchain-trusty-7
  - llvm-toolchain-trusty-8	

matrix:
  include:
    # OSX Clang Builds
    # - os: osx
    #   osx_image: xcode7.3
    #   compiler: clang
    #   env: COMPILER='clang++'

    # - os: osx
    #   osx_image: xcode8
    #   compiler: clang
    #   env: COMPILER='clang++'

    - os: osx
      osx_image: xcode9
      compiler: clang
      env: COMPILER='clang++'

    - os: osx
      osx_image: xcode9.1
      compiler: clang
      env: COMPILER='clang++'

    # Linux Builds
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: *all_sources
          packages: ['g++-5']
      env: COMPILER='g++-5'

    - os: linux
      compiler: gcc
      addons: &gcc6
        apt:
          sources: *all_sources
          packages: ['g++-6']
      env: COMPILER='g++-6'

    - os: linux
      compiler: gcc
      addons: &gcc7
        apt:
          sources: *all_sources
          packages: ['g++-7']
      env: COMPILER='g++-7'

    - os: linux
      compiler: gcc
      addons: &gcc8
        apt:
          sources: *all_sources
          packages: ['g++-8']
      env: COMPILER='g++-8'

    - os: linux
      compiler: clang
      addons:
          apt:
              sources: *all_sources
              packages: ['clang-6.0', 'libstdc++-8-dev']
      env: COMPILER='clang++-6.0' 

    - os: linux
      compiler: clang
      addons:
          apt:
              sources: *all_sources
              packages: ['clang-7*', 'libstdc++-8-dev']
      env: COMPILER='clang++-7'

    - os: linux
      compiler: clang
      addons:
          apt:
              sources: *all_sources
              packages: ['clang-8*', 'libstdc++-8-dev']
      env: COMPILER='clang++-8'


install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://cmake.org/files/v3.13/cmake-3.13.3-Linux-x86_64.tar.gz"
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      CMAKE_URL="http://cmake.org/files/v3.13/cmake-3.13.3-Darwin-x86_64.tar.gz"
    fi
    mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
    export PATH=${DEPS_DIR}/cmake/bin:${PATH}
  - cmake --version
  
before_script:
  - export CXX=${COMPILER}
  - ${CXX} --version
  - cd ${TRAVIS_BUILD_DIR}
  - pwd && ls
  #in case is needed
  #- cmake -Hcode/cpp/std_normal_distribution/ -BBuild-Debug -DCMAKE_BUILD_TYPE=Debug 
  - cmake -Hcode/cpp/std_normal_distribution/ -BBuild-Release -DCMAKE_BUILD_TYPE=Release


script:
  # - cd Build-Debug
  # - make -j 2
  # - CTEST_OUTPUT_ON_FAILURE=1 ctest -j 2
  #   # Coverage collection does not work for OS X atm
  # - |
  #   if [[ "${TRAVIS_OS_NAME}" == "linux" ]] && [[ "${COVERAGE}" == "1" ]]; then
  #     make gcov
  #     make lcov
  #     bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports"
  #   fi
  - # Go to release build
  - cd Build-Release
  - VERBOSE=1 cmake --build . --config Release
  - CTEST_OUTPUT_ON_FAILURE=1 ctest 
